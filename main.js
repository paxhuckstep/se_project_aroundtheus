!function(){"use strict";class t{constructor(t,e,s){this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=s}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardTrashButton.addEventListener("click",(()=>{this._handletrashButton()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handletrashButton(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardTrashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._setEventListeners(),this._cardElement}}class e{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e}_showInputError(t){const e=this._form.querySelector("#"+t.id+"-error");t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_removeInputError(t){const e=this._form.querySelector("#"+t.id+"-error");t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._removeInputError(t)}))}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return!this._inputList.every((t=>t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._removeInputError(t):this._showInputError(t)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}}class s{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e)}openPopup(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}closePopup(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown,",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.closePopup()};setEventListeners(){this._popupElement.addEventListener("mousedown",(t=>{(t.target.classList.contains("modal_opened")||t.target.classList.contains("modal__close"))&&this.closePopup()}))}}class n extends s{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=e,this._inputList=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),this.closePopup()})),super.setEventListeners()}}const o=document.querySelector("#edit-modal"),r=document.querySelector(".profile__add-button"),i=document.querySelector(".profile__edit-button"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-description-input"),c=o.querySelector("#profile-edit-form"),u=document.querySelector("#add-card-form"),d={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},m=new class{constructor(t,e){let{items:s,renderer:n}=t;this._items=s,this._renderer=n,this.cardListEl=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this.cardListEl.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago de Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:_},".cards__list");function _(e){const s=function(e){return new t(e,"#card-template",p).getView()}(e);m.addItem(s)}function p(t){g.openPopup(t)}m.renderItems(),i.addEventListener("click",(()=>{h.resetValidation();const t=S.getUserInfo();L.openPopup(),a.value=t.name,l.value=t.job})),r.addEventListener("click",(()=>{v.openPopup()}));const h=new e(d,c);h.enableValidation();const E=new e(d,u);E.enableValidation();const v=new n("#card-add-modal",(function(t){const e=t.title,s=t.url;console.log(t),_({name:e,link:s}),E.disableButton()}));v.setEventListeners();const L=new n("#edit-modal",(function(t){S.setUserInfo({name:t.name,job:t.description}),L.closePopup()}));L.setEventListeners();const g=new class extends s{constructor(t){super({popupSelector:t}),this._image=this._popupElement.querySelector("#picture-modal-image"),this._title=this._popupElement.querySelector("#picture-modal-heading")}openPopup(t){let{name:e,link:s}=t;this._image.src=s,this._image.alt=e,this._title.textContent=e,super.openPopup()}}("#picture-modal");g.setEventListeners();const S=new class{constructor(t){let{userName:e,userJob:s}=t;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(t){this._nameElement.textContent=t.name,this._jobElement.textContent=t.job}}({userName:".profile__title",userJob:".profile__description"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,