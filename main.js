!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._ID=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleLikeClick=r,this._handleTrashClick=n}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeClick(this),console.log(this)})),this._cardTrashButton.addEventListener("click",(()=>{this._handleTrashClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}cardDeletionConfirmed(){console.log("card delete clicked"),this._cardElement.remove(),this._cardElement=null}handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardTrashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._checkLikeView(),this._setEventListeners(),this._cardElement}_checkLikeView(){this._isLiked?this._cardLikeButton.classList.add("card__like-button_active"):this._cardLikeButton.classList.remove("card__like-button_active")}getId(){return this._ID}getLikeStatus(){return this._isLiked}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector("#"+e.id+"-error");e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_removeInputError(e){const t=this._form.querySelector("#"+e.id+"-error");e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._removeInputError(e)}))}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._removeInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}openPopup(){console.log(this._popupElement),this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}closePopup(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown,",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.closePopup()};setEventListeners(){console.log(this._popupElement),this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.closePopup()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._saveButton=this._popupForm.querySelector(".modal__save")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}openPopup(){this._saveButton.textContent="Save",super.openPopup()}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._saveButton.textContent="Saving...",this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),this.closePopup()})),super.setEventListeners()}}const n=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}handleServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this.handleServerResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"}).then(this.handleServerResponse)}unLikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"}).then(this.handleServerResponse)}createNewCard(e){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify({name:e.title,link:e.url})}).then(this.handleServerResponse)}deleteSelectedCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this.handleServerResponse)}getCurrentUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this.handleServerResponse)}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.name,about:e.description})}).then(this.handleServerResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this.handleServerResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3842a5e9-1960-4db2-bd37-d3db8df7459f","Content-Type":"application/json"}}),o=document.querySelector("#edit-modal"),i=document.querySelector(".profile__add-button"),a=document.querySelector(".profile__edit-button"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),d=o.querySelector("#profile-edit-form"),h=document.querySelector("#add-card-form"),u=document.querySelector(".profile__avatar-button"),_=document.querySelector("#avatar-photo-form"),p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},m=new class{constructor(e){let{userName:t,userJob:s,userAvatar:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.job}setAvatarUrl(e){this._avatarElement.src=e}}({userName:".profile__title",userJob:".profile__description",userAvatar:".profile__image"});function v(e){const t=e.getId();e.getLikeStatus()?n.unLikeCard(t).then((()=>{e.handleLikeIcon()})).catch((e=>{console.log(e)})):n.likeCard(t).then((()=>{e.handleLikeIcon()})).catch((e=>{console.log(e)}))}const E=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this.cardListEl=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this.cardListEl.prepend(e)}}({renderer:S},".cards__list");function S(t){const s=function(t){return new e(t,"#card-template",L,v,b).getView()}(t);E.addItem(s)}function L(e){q.openPopup(e)}function b(e){console.log(e);const t=e.getId();B.openPopup(),B.setSubmitAction((()=>{n.deleteSelectedCard(t).then((()=>{e.cardDeletionConfirmed(),B.closePopup()})).catch((e=>{console.log(e)}))}))}a.addEventListener("click",(()=>{f.resetValidation();const e=m.getUserInfo();y.openPopup(),l.value=e.name,c.value=e.job})),i.addEventListener("click",(()=>{C.openPopup()})),u.addEventListener("click",(()=>{k.resetValidation(),I.openPopup()}));const f=new t(p,d);f.enableValidation();const g=new t(p,h);g.enableValidation();const k=new t(p,_);k.enableValidation();const C=new r("#card-add-modal",(function(e){n.createNewCard(e).then((e=>{S(e),g.disableButton()})).catch((e=>{console.log(e)}))}));C.setEventListeners();const y=new r("#edit-modal",(function(e){n.updateProfileInfo(e).then((e=>{m.setUserInfo({name:e.name,job:e.about}),y.closePopup()})).catch((e=>console.log(e)))}));y.setEventListeners();const I=new r("#change-avatar-modal",(function(e){n.updateProfileAvatar(e.url).then((e=>{m.setAvatarUrl(e.avatar)})).catch((e=>{console.log(e)}))}));I.setEventListeners();const q=new class extends s{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector("#picture-modal-image"),this._title=this._popupElement.querySelector("#picture-modal-heading")}openPopup(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._title.textContent=t,super.openPopup()}}("#picture-modal");q.setEventListeners();const B=new class extends s{constructor(e){super({popupSelector:e}),this._yesDeleteButton=document.querySelector("#delete-card-button"),this._saveButton=this._popupElement.querySelector(".modal__save")}setSubmitAction(e){this._handleSubmit=e}openPopup(){this._saveButton.textContent="Yes",super.openPopup()}setEventListeners(){this._yesDeleteButton.addEventListener("click",(()=>{this._saveButton.textContent="Deleting...",this._handleSubmit()})),super.setEventListeners()}}("#delete-card-modal");B.setEventListeners(),n.getInitialCards().then((e=>{E.renderItems(e)})).catch((e=>{console.error(e)})),n.getCurrentUserInfo().then((e=>{m.setUserInfo({name:e.name,job:e.about}),m.setAvatarUrl(e.avatar)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,